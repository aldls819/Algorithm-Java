import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	/*
	 * N*N 크기의 종이를
	 * 모두 같은 색이 될 때까지 자르기
	 * 색종이를 잘라서 재귀를 타는 분할정복 문제
	 */
	
	//부분 색종이는 모두 같은 색상이어야 조건 만족
	//같은 색상이 아니라면 색종이를 절반씩 계속 자르기
	
	static int N;
	static int [][] arr;
	static int white;
	static int blue;

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		N = Integer.parseInt(br.readLine());
		arr = new int [N][N];
		white = 0;
		blue = 0;
		
		//배열 채우기
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<N; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		partition(0, 0, N);
		
		System.out.println(white);
		System.out.println(blue);

	}
	
	public static boolean colorCheck(int row, int col, int size) {
		//해당 배열 칸의 색이 뭔지 변수에 일단 저장
		int color = arr[row][col];
		
		//정해진 사이즈만큼 배열을 돌면서
		//색이 모두 같은지를 확인하자
		for(int i=row; i<row+size; i++) {
			for(int j=col; j<col+size; j++) {
				if(arr[i][j] != color) {
					return false;
				}
			}
		}
		return true;
	}
	
	public static void partition(int row, int col, int size) {
		//기저조건으로
		//colorCheck가 만족시 끝남
		if(colorCheck(row, col, size)) {
			if(arr[row][col] == 0) {
				white++;
			}
			else {
				blue++;
			}
			return;
		}
		
		int newSize = size/2;
		
		//재귀타기
		partition(row, col, newSize);
		partition(row+newSize, col, newSize);
		partition(row, col+newSize, newSize);
		partition(row+newSize, col+newSize, newSize);
	}

}
